// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  customer
  admin
}

enum OrderStatus {
  PENDING
  PROCESSING
  ON_HOLD
  SHIPPED
  DELIVERED
  CANCELED
  RETURNED
  REFUNDED
}

enum PaymentType {
  COD
  ONLINE_TRANSFER
}

enum PaymentMethodType {
  AYA_BANK
  KBZ_BANK
  AYA_PAY
  KBZ_PAY
}

enum CompanyPaymentAccountType {
  AYA_BANK
  KBZ_BANK
  AYA_PAY
  KBZ_PAY
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String?  // nullable for OTP-only signups
  name            String
  address         String   @db.Text
  locale          String   @default("en") // 'en' | 'my'
  role            UserRole @default(customer)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  otps           Otp[]
  paymentMethods PaymentMethod[]
  orders         Order[]

  @@map("users")
}

model Otp {
  id        String   @id @default(cuid())
  code      String
  userId    String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  consumed  Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otps")
}

model Product {
  id                    String   @id @default(cuid())
  sku                   String?  @unique
  name_en               String
  name_my               String?
  description_en        String?  @db.Text
  description_my        String?  @db.Text
  images                String[] // array of local storage relative paths
  price                 Decimal  @db.Decimal(10, 2) // sale price
  disabled              Boolean  @default(false) // hide from list
  outOfStock            Boolean  @default(false) // manual mark out-of-stock
  allowSellWithoutStock Boolean  @default(true)
  metadata              Json     // for rice-specific fields: variety, grade, weight, harvest_date, etc.
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  stockEntries StockEntry[]
  orderItems   OrderItem[]

  @@map("products")
}

model StockEntry {
  id            String  @id @default(cuid())
  productId     String
  quantity      Int
  purchasePrice Decimal @db.Decimal(10, 2) // price admin paid for stock
  createdAt     DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_entries")
}

model PaymentMethod {
  id      String            @id @default(cuid())
  userId  String
  type    PaymentMethodType
  details Json // account number/name or phone no and name
  createdAt DateTime @default(now())

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("payment_methods")
}

model CompanyPaymentAccount {
  id      String                      @id @default(cuid())
  name    String                      // e.g., "AYA Bank - Main Account"
  type    CompanyPaymentAccountType
  details Json                        // accountNo, accountName, phone, etc.
  enabled Boolean                     @default(true)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  // Relations
  orders Order[]

  @@map("company_payment_accounts")
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  status            OrderStatus @default(PENDING)
  paymentType       PaymentType
  paymentMethodId   String?
  companyAccountId  String?     // reference to company payment account for online transfers
  totalAmount       Decimal     @db.Decimal(10, 2)
  shippingAddress   Json        // snapshot of address
  transactionId     String?     // from customer when online transfer
  paymentScreenshot String?     // stored path
  customerAccountName String?   // customer's account name for online transfer
  customerAccountNo  String?    // customer's account number for online transfer
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  companyAccount CompanyPaymentAccount? @relation(fields: [companyAccountId], references: [id])
  items         OrderItem[]
  refunds       Refund[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  unitPrice Decimal @db.Decimal(10, 2) // snapshot of product price when ordered
  quantity  Int
  metadata  Json?   // snapshot product metadata (weight/variety) if needed

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Refund {
  id         String   @id @default(cuid())
  orderId    String
  amount     Decimal  @db.Decimal(10, 2)
  refundedAt DateTime @default(now())
  reason     String

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("refunds")
}
